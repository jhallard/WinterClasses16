John Allard
ID: 1437547
January 6th, 2016

Reading #1 - The 'Introduction' and 'Starting Out' chapters from 'Learn You a Haskell'.

The introductory chapter to this book served, not surprisingly, as a simple introduction to the world of Haskell. It explains that the tutorial is aimed at the procedural programming crowd, the traditionally dominant programming paradigm. It then goes on to explain what Haskell is and how it differs from what most programmers are familiar with. To quote the text, "Haskell is a purely functional programming language", which is further explained as "In purely functional programming you don't tell the computer what to do as such but rather you tell it what stuff is". The document then mentions the lazy evaluation of Haskell (specifically in function arguments) and the benefits that affords programmers, and then goes on to discuss the rich, static type system. The introduction is finished with a short description of how to get the GHC set up.

The 'Starting Out' chapter shows how basic Haskell syntax works, and begins to reveal the major differences between this language and more traditional ones. The first part of this section goes over simple expressions, including arithmetic, boolean expressions, and invalid expressions (where types don't match). We then went over some of the simple built in functions like `succ`, `max`, `min`, etc. After this we were introduced to functions, specifically how to define them, and how they differ from functions seen in traditional languages. The discussion included passing multiple arguments, loading functions from other files, conditionals (if/then/else) inside of functions, and constant functions. After this we were introduced to the crucial list built-in data structure, how it works, and some built in functions to perform operations on the list like concatination and indexing. We then learned some neat tricks to do with lists, like texas ranges (very convenient), cycling, repeating, replicating, etc. The section ended with a look at tuples, something which at first appears very similar to a list but actually has a few crucial differences (fixed size, composite of types based on tuple entries, etc), and more advanced techniques like list building syntax and zipping together lists. 
